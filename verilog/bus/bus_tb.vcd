$date
	Sat Dec 07 01:42:27 2024
$end
$version
	Icarus Verilog
$end
$timescale
	100ps
$end
$scope module bus_tb $end
$var wire 1 ! s_wr $end
$var wire 8 " s_sel [7:0] $end
$var wire 32 # s_din [31:0] $end
$var wire 8 $ s_address [7:0] $end
$var wire 32 % m_din [31:0] $end
$var wire 1 & m2_grant $end
$var wire 1 ' m1_grant $end
$var wire 1 ( m0_grant $end
$var reg 1 ) clk $end
$var reg 8 * m0_address [7:0] $end
$var reg 32 + m0_dout [31:0] $end
$var reg 1 , m0_req $end
$var reg 1 - m0_wr $end
$var reg 8 . m1_address [7:0] $end
$var reg 32 / m1_dout [31:0] $end
$var reg 1 0 m1_req $end
$var reg 1 1 m1_wr $end
$var reg 8 2 m2_address [7:0] $end
$var reg 32 3 m2_dout [31:0] $end
$var reg 1 4 m2_req $end
$var reg 1 5 m2_wr $end
$var reg 1 6 reset_n $end
$scope module uut $end
$var wire 1 ) clk $end
$var wire 8 7 m0_address [7:0] $end
$var wire 32 8 m0_dout [31:0] $end
$var wire 1 , m0_req $end
$var wire 1 - m0_wr $end
$var wire 8 9 m1_address [7:0] $end
$var wire 32 : m1_dout [31:0] $end
$var wire 1 0 m1_req $end
$var wire 1 1 m1_wr $end
$var wire 8 ; m2_address [7:0] $end
$var wire 32 < m2_dout [31:0] $end
$var wire 1 4 m2_req $end
$var wire 1 5 m2_wr $end
$var wire 1 6 reset_n $end
$var wire 32 = s0_dout [31:0] $end
$var wire 32 > s1_dout [31:0] $end
$var wire 32 ? s2_dout [31:0] $end
$var wire 32 @ s3_dout [31:0] $end
$var wire 32 A s4_dout [31:0] $end
$var wire 32 B s5_dout [31:0] $end
$var wire 32 C s6_dout [31:0] $end
$var wire 32 D s7_dout [31:0] $end
$var reg 1 ( m0_grant $end
$var reg 1 ' m1_grant $end
$var reg 1 & m2_grant $end
$var reg 32 E m_din [31:0] $end
$var reg 8 F s_address [7:0] $end
$var reg 32 G s_din [31:0] $end
$var reg 8 H s_sel [7:0] $end
$var reg 1 ! s_wr $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b1 H
b0 G
b0 F
bz E
bz D
bz C
bz B
bz A
bz @
bz ?
bz >
bz =
b0 <
b0 ;
b0 :
b0 9
b0 8
b0 7
06
05
04
b0 3
b0 2
01
00
b0 /
b0 .
0-
0,
b0 +
b0 *
0)
0(
0'
0&
bz %
b0 $
b0 #
b1 "
0!
$end
#50
1)
#100
0)
16
#150
1(
1)
#200
b10100101101001011010010110100101 #
b10100101101001011010010110100101 G
1!
b10101 $
b10101 F
0)
1-
b10100101101001011010010110100101 +
b10100101101001011010010110100101 8
b10101 *
b10101 7
1,
#250
1)
#300
0)
0,
#350
1)
#400
0)
#450
1)
#500
0)
11
b10110101101101011011010110110101 /
b10110101101101011011010110110101 :
b1000101 .
b1000101 9
10
#550
b100 "
b100 H
b10110101101101011011010110110101 #
b10110101101101011011010110110101 G
b1000101 $
b1000101 F
1'
0(
1)
#600
0)
00
#650
b1 "
b1 H
b10100101101001011010010110100101 #
b10100101101001011010010110100101 G
b10101 $
b10101 F
0'
1(
1)
#700
0)
#750
1)
#800
0)
#850
1)
#900
0)
15
b11000101110001011100010111000101 3
b11000101110001011100010111000101 <
b1110101 2
b1110101 ;
14
#950
b1000 "
b1000 H
b11000101110001011100010111000101 #
b11000101110001011100010111000101 G
b1110101 $
b1110101 F
1&
0(
1)
#1000
0)
04
#1050
b1 "
b1 H
b10100101101001011010010110100101 #
b10100101101001011010010110100101 G
b10101 $
b10101 F
0&
1(
1)
#1100
0)
#1150
1)
#1200
0)
#1250
1)
#1300
0)
#1350
1)
#1400
b11011110101011011011111011101111 #
b11011110101011011011111011101111 G
b11111 $
b11111 F
0)
b11011110101011011011111011101111 +
b11011110101011011011111011101111 8
b11111 *
b11111 7
1,
#1450
1)
#1500
0)
0,
#1550
1)
#1600
0)
#1650
1)
#1700
0)
#1750
1)
#1800
0)
#1850
1)
#1900
0)
#1950
1)
#2000
b10 "
b10 H
b11001010111111101011101010111110 #
b11001010111111101011101010111110 G
b100101 $
b100101 F
0)
b11001010111111101011101010111110 +
b11001010111111101011101010111110 8
b100101 *
b100101 7
1,
#2050
1)
#2100
0)
0,
#2150
1)
#2200
0)
#2250
1)
#2300
0)
#2350
1)
#2400
0)
#2450
1)
#2500
0)
#2550
1)
#2600
0)
#2650
1)
#2700
b10000000 "
b10000000 H
b10010001101000101011001111000 #
b10010001101000101011001111000 G
b11111111 $
b11111111 F
0)
b10010001101000101011001111000 +
b10010001101000101011001111000 8
b11111111 *
b11111111 7
1,
#2750
1)
#2800
0)
0,
#2850
1)
#2900
0)
#2950
1)
#3000
0)
#3050
1)
#3100
0)
#3150
1)
#3200
0)
#3250
1)
#3300
0)
#3350
1)
#3400
0)
#3450
1)
#3500
0)
#3550
1)
#3600
0)
#3650
1)
#3700
0)
#3750
1)
#3800
0)
